// <auto-generated />
using System;
using ApiApplication.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiApplication.Migrations
{
    [DbContext(typeof(CinemaContext))]
    partial class CinemaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("ApiApplication.Database.Entities.AuditoriumEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Auditoriums");
                });

            modelBuilder.Entity("ApiApplication.Database.Entities.MovieEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImdbId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Stars")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("ApiApplication.Database.Entities.SeatEntity", b =>
                {
                    b.Property<int>("AuditoriumId")
                        .HasColumnType("INTEGER");

                    b.Property<short>("Row")
                        .HasColumnType("INTEGER");

                    b.Property<short>("SeatNumber")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TicketEntityId")
                        .HasColumnType("TEXT");

                    b.HasKey("AuditoriumId", "Row", "SeatNumber");

                    b.HasIndex("TicketEntityId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("ApiApplication.Database.Entities.ShowtimeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuditoriumId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SessionDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuditoriumId");

                    b.HasIndex("MovieId");

                    b.ToTable("Showtimes");
                });

            modelBuilder.Entity("ApiApplication.Database.Entities.TicketEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Paid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShowtimeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ShowtimeId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("ApiApplication.Database.Entities.SeatEntity", b =>
                {
                    b.HasOne("ApiApplication.Database.Entities.AuditoriumEntity", "Auditorium")
                        .WithMany("Seats")
                        .HasForeignKey("AuditoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiApplication.Database.Entities.TicketEntity", "Ticket")
                        .WithMany("Seats")
                        .HasForeignKey("TicketEntityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Auditorium");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("ApiApplication.Database.Entities.ShowtimeEntity", b =>
                {
                    b.HasOne("ApiApplication.Database.Entities.AuditoriumEntity", null)
                        .WithMany("Showtimes")
                        .HasForeignKey("AuditoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiApplication.Database.Entities.MovieEntity", "Movie")
                        .WithMany("Showtimes")
                        .HasForeignKey("MovieId");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("ApiApplication.Database.Entities.TicketEntity", b =>
                {
                    b.HasOne("ApiApplication.Database.Entities.ShowtimeEntity", "Showtime")
                        .WithMany("Tickets")
                        .HasForeignKey("ShowtimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Showtime");
                });

            modelBuilder.Entity("ApiApplication.Database.Entities.AuditoriumEntity", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("Showtimes");
                });

            modelBuilder.Entity("ApiApplication.Database.Entities.MovieEntity", b =>
                {
                    b.Navigation("Showtimes");
                });

            modelBuilder.Entity("ApiApplication.Database.Entities.ShowtimeEntity", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ApiApplication.Database.Entities.TicketEntity", b =>
                {
                    b.Navigation("Seats");
                });
#pragma warning restore 612, 618
        }
    }
}
